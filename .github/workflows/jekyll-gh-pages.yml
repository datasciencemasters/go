# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
#include<iostream.h>
#include<conio.h>
class  fq
(
   private :intn,i,ele,a(20)
   public :void input();
                void compute();
                void output();
  );
   void fq::input()
   (
       cout<<"enter the number  "<<endl;
       cin>>n; 
       cout<<"enter the array "<<endl;
       for(i=0;i<n;i++)
       cin>>a(i);
       cout<<"enter the element"<<endl;
       cin>>element; 
       )
       void fq::compute()
       (
          c=0
          for(i=0;i<n;i++)
          if(a(i)==ele)
          c++;
          )
          void fq::output()
          (
           count <<"c="<<c<<endl;
           )
           void main()
           (
           fq f; 
           clrscr();
           f.input();
           f.compute();
           f.output();
           getch();
           )
           
